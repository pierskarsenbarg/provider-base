// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package base

import (
	"context"
	"reflect"

	"errors"
	"github.com/pierskarsenbarg/provider-base/sdk/go/base/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Provider struct {
	pulumi.ProviderResourceState

	// Your access token
	AccessToken pulumix.Output[string] `pulumi:"accessToken"`
	// Environment
	Environment pulumix.Output[*string] `pulumi:"environment"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessToken == nil {
		return nil, errors.New("invalid value for required argument 'AccessToken'")
	}
	if args.AccessToken != nil {
		untypedSecretValue := pulumi.ToSecret(args.AccessToken.ToOutput(ctx.Context()).Untyped())
		args.AccessToken = pulumix.MustConvertTyped[string](untypedSecretValue)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accessToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:base", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// Your access token
	AccessToken string `pulumi:"accessToken"`
	// Environment
	Environment *string `pulumi:"environment"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// Your access token
	AccessToken pulumix.Input[string]
	// Environment
	Environment pulumix.Input[*string]
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToOutput(ctx context.Context) pulumix.Output[Provider] {
	return pulumix.Output[Provider]{
		OutputState: o.OutputState,
	}
}

// Your access token
func (o ProviderOutput) AccessToken() pulumix.Output[string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[string] { return v.AccessToken })
	return pulumix.Flatten[string, pulumix.Output[string]](value)
}

// Environment
func (o ProviderOutput) Environment() pulumix.Output[*string] {
	value := pulumix.Apply[Provider](o, func(v Provider) pulumix.Output[*string] { return v.Environment })
	return pulumix.Flatten[*string, pulumix.Output[*string]](value)
}

func init() {
	pulumi.RegisterOutputType(ProviderOutput{})
}
